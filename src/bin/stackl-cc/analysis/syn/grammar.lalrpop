use std::cell::RefCell;
use std::rc::Rc;
use crate::analysis::syn::*;
use crate::analysis::tok::*;
use crate::diagnostics::syn;
use lalrpop_util::ErrorRecovery;


grammar<'a>(
	errors: &'a mut Vec<ErrorRecovery<usize, Token, syn::Diagnostic>>,
	tk_ref: &'a Rc<RefCell<InnerIter>>
);


// A.1.3 Identifiers

Identifier: Ident = IDENT => <>.kind.unwrap_ident();


// A.1.5 Constants

Constant: Const = CONST => <>.kind.unwrap_const();

EnumerationConstant: Ident = Identifier;


// A.1.6 String literals

StringLiteral: StrLit = <v:STR_LIT+> => string_concat(v.into_boxed_slice());


// A.2.1 Expressions

PrimaryExpr: Expr = {
	Identifier => Expr::Ident(<>),
	Constant => Expr::Const(<>),
	StringLiteral => Expr::StrLit(<>),
	"(" <expr:Expr> ")" => Expr::Paren(Box::new(expr)),
};

PostfixExpr: Expr = {
	PrimaryExpr,
	<expr:PostfixExpr> "[" <arr:Expr> "]" => Expr::Unary(ExprUnary{
		op: UnOp::Postfix(Postfix::Array(Box::new(arr))),
		expr: Box::new(expr),
	}),
	<expr:PostfixExpr> "(" <args:ArgumentExprList?> ")" => Expr::Unary(ExprUnary{
		op: UnOp::Postfix(Postfix::ArgExprList(args.unwrap_or_default())),
		expr: Box::new(expr),
	}),
	<expr:PostfixExpr> "." <ident:Identifier> => Expr::Unary(ExprUnary{
		op: UnOp::Postfix(Postfix::Dot(ident)),
		expr: Box::new(expr),
	}),
	<expr:PostfixExpr> "->" <ident:Identifier> => Expr::Unary(ExprUnary{
		op: UnOp::Postfix(Postfix::Arrow(ident)),
		expr: Box::new(expr),
	}),
	<expr:PostfixExpr> "++" => Expr::Unary(ExprUnary{
		op: UnOp::Postfix(Postfix::Inc),
		expr: Box::new(expr),
	}),
	<expr:PostfixExpr> "--" => Expr::Unary(ExprUnary{
		op: UnOp::Postfix(Postfix::Dec),
		expr: Box::new(expr),
	}),
	"(" <ty:TypeName> ")" "{" <list:InitializerList> ","? "}" => Expr::CompoundLiteral(ty, list),
};

ArgumentExprList: Vec<Expr> = {
	AssignmentExpr => vec![<>],
	<mut list:ArgumentExprList> "," <expr:AssignmentExpr> => {
		list.push(expr);
		list
	},
};

UnaryExpr: Expr = {
	PostfixExpr,
	"++" <expr:UnaryExpr> => Expr::Unary(ExprUnary{
		op: UnOp::Inc,
		expr: Box::new(expr),
	}),
	"--" <expr:UnaryExpr> => Expr::Unary(ExprUnary{
		op: UnOp::Dec,
		expr: Box::new(expr),
	}),
	<prefix:UnaryOperator> <expr:CastExpr> => Expr::Unary(ExprUnary{
		op: prefix,
		expr: Box::new(expr),
	}),
	"sizeof" <expr:UnaryExpr> => Expr::Unary(ExprUnary{
		op: UnOp::Sizeof,
		expr: Box::new(expr),
	}),
	"sizeof" "(" <ty:TypeName> ")" => Expr::Sizeof(ty),
};

UnaryOperator: UnOp = {
	"&" => UnOp::Amp,
	"*" => UnOp::Star,
	"+" => UnOp::Plus,
	"-" => UnOp::Minus,
	"~" => UnOp::Comp,
	"!" => UnOp::Neg,
};

CastExpr: Expr = {
	UnaryExpr,
	"(" <ty:TypeName> ")" <expr:CastExpr> => Expr::Unary(ExprUnary{
		op: UnOp::Cast(ty),
		expr: Box::new(expr),
	}),
};

MultiplicativeExpr: Expr = {
	CastExpr,
	<lhs:MultiplicativeExpr> "*" <rhs:CastExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::Mul,
		right: Box::new(rhs),
	}),
	<lhs:MultiplicativeExpr> "/" <rhs:CastExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::Div,
		right: Box::new(rhs),
	}),
	<lhs:MultiplicativeExpr> "%" <rhs:CastExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::Mod,
		right: Box::new(rhs),
	}),
};

AdditiveExpr: Expr = {
	MultiplicativeExpr,
	<lhs:AdditiveExpr> "+" <rhs:MultiplicativeExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::Add,
		right: Box::new(rhs)
	}),
	<lhs:AdditiveExpr> "-" <rhs:MultiplicativeExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::Sub,
		right: Box::new(rhs),
	}),
};

ShiftExpr: Expr = {
	AdditiveExpr,
	<lhs:ShiftExpr> "<<" <rhs:AdditiveExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::LShift,
		right: Box::new(rhs),
	}),
	<lhs:ShiftExpr> ">>" <rhs:AdditiveExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::RShift,
		right: Box::new(rhs),
	}),
};

RelationalExpr: Expr = {
	ShiftExpr,
	<lhs:RelationalExpr> "<" <rhs:ShiftExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::Less,
		right: Box::new(rhs),
	}),
	<lhs:RelationalExpr> ">" <rhs:ShiftExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::Great,
		right: Box::new(rhs),
	}),
	<lhs:RelationalExpr> "<=" <rhs:ShiftExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::LessEqual,
		right: Box::new(rhs),
	}),
	<lhs:RelationalExpr> ">=" <rhs:ShiftExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::GreatEqual,
		right: Box::new(rhs),
	}),
};

EqualityExpr: Expr = {
	RelationalExpr,
	<lhs:EqualityExpr> "==" <rhs:RelationalExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::Equal,
		right: Box::new(rhs),
	}),
	<lhs:EqualityExpr> "!=" <rhs:RelationalExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::NotEqual,
		right: Box::new(rhs),
	}),
};

AndExpr: Expr = {
	EqualityExpr,
	<lhs:AndExpr> "&" <rhs:EqualityExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::And,
		right: Box::new(rhs),
	}),
};

ExclusiveOrExpr: Expr = {
	AndExpr,
	<lhs:ExclusiveOrExpr> "^" <rhs:AndExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::XOr,
		right: Box::new(rhs),
	}),
};

InclusiveOrExpr: Expr = {
	ExclusiveOrExpr,
	<lhs:InclusiveOrExpr> "|" <rhs:ExclusiveOrExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::Or,
		right: Box::new(rhs),
	}),
};

LogicalAndExpr: Expr = {
	InclusiveOrExpr,
	<lhs:LogicalAndExpr> "&&" <rhs:InclusiveOrExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::LogicalAnd,
		right: Box::new(rhs),
	}),
};

LogicalOrExpr: Expr = {
	LogicalAndExpr,
	<lhs:LogicalOrExpr> "||" <rhs:LogicalAndExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::XOr,
		right: Box::new(rhs),
	}),
};

ConditionalExpr: Expr = {
	LogicalOrExpr,
	LogicalOrExpr "?" Expr ":" ConditionalExpr => todo!(),
};

AssignmentExpr: Expr = {
	ConditionalExpr,
	<lhs:UnaryExpr> <op:AssignmentOperator> <rhs:AssignmentExpr> => {
		Expr::Binary(ExprBinary{
			left: Box::new(lhs),
			op: op,
			right: Box::new(rhs),
		})
	},
};

AssignmentOperator: BinOp = {
	"=" => BinOp::Assign,
	"*=" => BinOp::MulAssign,
	"/=" => BinOp::DivAssign,
	"%=" => BinOp::ModAssign,
	"+=" => BinOp::AddAssign,
	"-=" => BinOp::SubAssign,
	"<<=" => BinOp::LShiftAssign,
	">>=" => BinOp::RShiftAssign,
	"&=" => BinOp::AmpAssign,
	"^=" => BinOp::XOrAssign,
	"|=" => BinOp::OrAssign,
};

Expr: Expr = {
	AssignmentExpr,
	<lhs:Expr> "," <rhs:AssignmentExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::Comma,
		right: Box::new(rhs),
	}),
};

ConstantExpr = ConditionalExpr;



// A.2.2 Declarations

Declaration: Declaration = {
	<specs:DeclarationSpecifier+> <init_list:InitDeclaratorList?> ";" => {
		tk_ref.borrow_mut().is_typedef = false;
		Declaration {
			declaration_specifiers: specs,
			init_declarator_list: init_list.unwrap_or_default(),
		}
	},
};

DeclarationSpecifier: DeclarationSpecifier = {
	StorageClassSpecifier => DeclarationSpecifier::StorageClassSpecifier(<>),
	TypeSpecifier => DeclarationSpecifier::TypeSpecifier(<>),
	TypeQualifier => DeclarationSpecifier::TypeQualifier(<>),
	FunctionSpecifier => DeclarationSpecifier::FunctionSpecifier(<>),
};

InitDeclaratorList: Vec<InitDeclarator> = {
	InitDeclarator => vec![<>],
	<mut lhs:InitDeclaratorList> "," <rhs:InitDeclarator> => {
		lhs.push(rhs);
		lhs
	},
};

InitDeclarator: InitDeclarator = {
	Declarator => InitDeclarator {
		declarator: <>,
		initializer: None,
	},
	<decl:Declarator> "=" <init:Initializer> => InitDeclarator {
		declarator: decl,
		initializer: Some(init)
	},
};

StorageClassSpecifier: StorageClassSpecifier = {
	"typedef" => {
		tk_ref.borrow_mut().is_typedef = true;
		StorageClassSpecifier::Typedef
	},
	"extern" => StorageClassSpecifier::Extern,
	"static" => StorageClassSpecifier::Static,
	"auto" => StorageClassSpecifier::Auto,
	"register" => StorageClassSpecifier::Register,
}

TypeSpecifier: TypeSpecifier = {
	"void" => TypeSpecifier::Void,
	"char" => TypeSpecifier::Char,
	"short" => TypeSpecifier::Short,
	"int" => TypeSpecifier::Int,
	"long" => TypeSpecifier::Long,
	"float" => TypeSpecifier::Float,
	"double" => TypeSpecifier::Double,
	"signed" => TypeSpecifier::Signed,
	"unsigned" => TypeSpecifier::Unsigned,
	"_Bool" => TypeSpecifier::Bool,
	StructOrUnionSpecifier => TypeSpecifier::StructOrUnionSpecifier(<>),
	EnumSpecifier => TypeSpecifier::EnumSpecifier(<>),
	TypedefName => todo!("typedef-name"),
};

StructOrUnionSpecifier: StructOrUnionSpecifier = {
	StructOrUnion Identifier? "{" StructDeclaration+ "}" => todo!(),
	StructOrUnion Identifier => todo!(),
};

StructOrUnion: Keyword = {
	"struct" => todo!("struct"),
	"union" => todo!("union"),
};

StructDeclaration: StructDeclaration = {
	<list0:SpecifierQualifierList> <list1:StructDeclaratorList> ";" => StructDeclaration {
		specifier_qualifier_list: list0,
		struct_declaration_list: list1,
	}
};

SpecifierQualifierList: Vec<SpecifierQualifier> = SpecifierQualifier+;

SpecifierQualifier: SpecifierQualifier = {
	TypeSpecifier => SpecifierQualifier::TypeSpecifier(<>),
	TypeQualifier => SpecifierQualifier::TypeQualifier(<>),
};

StructDeclaratorList: Vec<StructDeclarator> = {
	StructDeclarator => vec![<>],
	<mut list:StructDeclaratorList> "," <elem:StructDeclarator> => {
		list.push(elem);
		list
	},
};

StructDeclarator: StructDeclarator = {
	<decl:Declarator> => StructDeclarator {
		declarator: Some(decl),
		constant_expr: None,
	},
	<decl:Declarator?> ":" <expr:ConstantExpr> => StructDeclarator {
		declarator: decl,
		constant_expr: Some(expr),
	},
};

EnumSpecifier: EnumSpecifier = {
	"enum" <id:Identifier?> "{" <list:EnumeratorList> ","? "}" => {
		EnumSpecifier {
			identifier: id,
			enumerator_list: list,
		}
	},
	"enum" <id:Identifier> => EnumSpecifier{
		identifier: Some(id),
		enumerator_list: vec![],
	},
};

EnumeratorList: Vec<Enumerator> = {
	Enumerator => vec![<>],
	<mut list:EnumeratorList> "," <elem:Enumerator> => {
		list.push(elem);
		list
	},
};

Enumerator: Enumerator = {
	<ident:EnumerationConstant> => Enumerator {
		enumeration_constant: ident,
		constant_expr: None,
	},
	<ident:EnumerationConstant> "=" <expr:ConstantExpr> => Enumerator {
		enumeration_constant: ident,
		constant_expr: Some(expr),
	},
};

TypeQualifier: TypeQualifier = {
	"const" => TypeQualifier::Const,
	"restrict" => TypeQualifier::Restrict,
	"volatile" => TypeQualifier::Volatile,
};

FunctionSpecifier: FunctionSpecifier = "inline" => FunctionSpecifier::Inline;

Declarator: Declarator = {
	<ptr:Pointer?> <dd_list:DirectDeclaratorList> => Declarator {
		pointer: ptr.unwrap_or_default(),
		direct_declarator: dd_list,
	},
};

DirectDeclaratorList: Vec<DirectDeclarator> = {
	Identifier => {
		let mut tk_mut = tk_ref.borrow_mut();
		if tk_mut.is_typedef == true {
			tk_mut.push_type(<>.clone());
		}
		vec![DirectDeclarator::Identifier(<>)]
	},
	"(" <decl:Declarator> ")" => vec![DirectDeclarator::Declarator(Box::new(decl))],
	<mut list:DirectDeclaratorList> "[" <qual:TypeQualifier*> <expr:AssignmentExpr?> "]" => {
		list.push(DirectDeclarator::Array{
			type_qualifier_list: qual,
			assignment_expr: expr,
			has_static: false,
			has_ptr: false,
		});
		list
	},
	<mut list:DirectDeclaratorList> "[" "static" TypeQualifier* AssignmentExpr "]" => todo!("direct static"),
	<mut list:DirectDeclaratorList> "[" TypeQualifier+ "static" AssignmentExpr "]" => todo!("direct typeq"),
	<mut list:DirectDeclaratorList> "[" TypeQualifier* "*" "]" => todo!("direct typeq *"),
	<mut dd:DirectDeclaratorList> "(" <list: ParameterTypeList> ")" => {
		dd.push(DirectDeclarator::ParameterTypeList(list));
		dd
	},
	<mut dd:DirectDeclaratorList> "(" <ident_list:IdentifierList?> ")" => {
		dd.push(DirectDeclarator::IdentifierList(ident_list.unwrap_or_default()));
		dd
	},
};

Pointer: Vec<Pointer> = {
	"*" <tq:TypeQualifier*> => vec![Pointer {
		type_qualifier_list: tq,
	}],
	"*" TypeQualifier* Pointer => todo!("* type-qualifier pointer"),
};
ParameterTypeList: ParameterTypeList = {
	ParameterList => {
		ParameterTypeList{
			parameter_list: <>,
			comma_ellipsis: false,
		}
	},
	ParameterList "," "..." => todo!("parameter-list , ..."),
};

ParameterList: Vec<ParameterDeclaration> = {
	ParameterDeclaration => vec![<>],
	ParameterList "," ParameterDeclaration => todo!("parameter-list , parameter-declaration"),
};

ParameterDeclaration: ParameterDeclaration = {
	<specifiers:DeclarationSpecifier+> <decl:ParameterDeclarator> => ParameterDeclaration{
		declaration_specifiers: specifiers,
		parameter_declarator: decl,
	},
};

ParameterDeclarator: ParameterDeclarator = {
	Declarator => todo!("parameter-declarator"),
	<decl:AbstractDeclarator?> => ParameterDeclarator::AbstractDeclarator(decl),
}

IdentifierList: Vec<Ident> = {
	Identifier => vec![<>],
	<mut v:IdentifierList> "," <elem:Identifier> => {
		v.push(elem);
		v
	},
};

TypeName: TypeName = {
	SpecifierQualifierList AbstractDeclarator? => todo!("specifier-qualifier-list abstract-declarator"),
};

AbstractDeclarator: AbstractDeclarator = {
	Pointer => todo!("ptr"),
	Pointer? DirectAbstractDeclarator => todo!("ptr direct"),
};


DirectAbstractDeclarator: DirectAbstractDeclarator = {
	"(" AbstractDeclarator ")" => todo!("abstract-decl"),
	DirectAbstractDeclarator? "[" AssignmentExpr? "]" => todo!("direct assign"),
	DirectAbstractDeclarator? "[" "*" "]" => todo!("direct *"),
	DirectAbstractDeclarator? "(" ParameterTypeList? ")" => todo!("direct param"),
};


TypedefName: Ident = TYPE_NAME => todo!("typedef-name");

Initializer: Initializer = {
	AssignmentExpr => Initializer::Expr(<>),
	"{" InitializerList ","? "}" => todo!("init-list"),
};

InitializerList: InitializerList = {
	Designation? Initializer => todo!("desig init"),
	InitializerList "," Designation? Initializer => todo!("init list , desig"),
};

Designation: Designation = {
	Designator+ "=" => todo!("desig list"),
};

Designator: Designator = {
	"[" ConstantExpr "]" => todo!("const-expr"),
	"." Identifier => todo!(" . identifier"),
};


// A.2.3 Statements

Statement: Stmt = {
	OpenedStatement,
	ClosedStatement,
};

OpenedStatement: Stmt = {
	"if" "(" Expr ")" OpenedStatement => todo!("opened-if"),
	"if" "(" Expr ")" ClosedStatement "else" OpenedStatement => todo!("opened-if-else"),
	"switch" "(" Expr ")" OpenedStatement => todo!("opened-switch"),
	OpenedLabeledStatement => todo!("opened-label"),
	OpenedCompoundStatement => todo!("opened-compound"),
	OpenedIterationStatement => todo!("opened-iter"),
};

ClosedStatement: Stmt = {
	SimpleStatement,
	"if" "(" Expr ")" ClosedStatement "else" ClosedStatement => todo!("closed-if"),
	"switch" "(" Expr ")" ClosedStatement => todo!("closed-switch"),
	ClosedLabeledStatement => todo!("closed-label"),
	ClosedCompoundStatement => todo!("closed-compound"),
	ClosedIterationStatement => todo!("closed-iter"),
};

SimpleStatement: Stmt = {
	ExprStatement => Stmt::ExpressionStatement(<>),
	JumpStatement => Stmt::JumpStatement(<>),
	AsmStatement => Stmt::AssemblerStatement(<>),
};


OpenedLabeledStatement: LabeledStmt = {
	Identifier ":" OpenedStatement => todo!("label"),
	"case" ConstantExpr ":" OpenedStatement => todo!("case"),
	"default" ":" OpenedStatement => todo!("default"),
};

ClosedLabeledStatement: LabeledStmt = {
	Identifier ":" ClosedStatement => todo!("label"),
	"case" ConstantExpr ":" ClosedStatement => todo!("case"),
	"default" ":" ClosedStatement => todo!("default"),
};


OpenedCompoundStatement: CompoundStmt = {
	"{" OpenedBlockItem* "}" => todo!("compound"),
};

ClosedCompoundStatement: CompoundStmt = {
	"{" <blocks:ClosedBlockItem*> "}" => CompoundStmt(blocks),
};


OpenedBlockItem: BlockItem = {
	Declaration => BlockItem::Declaration(<>),
	OpenedStatement => BlockItem::Statement(<>),
	! => { errors.push(<>); BlockItem::Error },
};
ClosedBlockItem: BlockItem = {
	Declaration => BlockItem::Declaration(<>),
	ClosedStatement => BlockItem::Statement(<>),
	! => { errors.push(<>); BlockItem::Error },
};

ExprStatement: ExprStmt = Expr? ";" => todo!("expr");

ClosedIterationStatement: IterationStmt = {
	"while" "(" Expr ")" ClosedStatement => todo!(),
	"do" ClosedStatement "while" "(" Expr ")" ";"
	"for" "(" Expr? ";" Expr? ";" Expr? ")" ClosedStatement => todo!(),
	"for" "(" Declaration Expr? ";" Expr? ")" ClosedStatement => todo!(),
};
OpenedIterationStatement: IterationStmt = {
	"while" "(" Expr ")" OpenedStatement => todo!(),
	"do" OpenedStatement "while" "(" Expr ")" ";"
	"for" "(" Expr? ";" Expr? ";" Expr? ")" OpenedStatement => todo!(),
	"for" "(" Declaration Expr? ";" Expr? ")" OpenedStatement => todo!(),
};

JumpStatement: JumpStmt = {
	"goto" <ident:Identifier> ";" => JumpStmt::Goto(ident),
	"continue" ";" => JumpStmt::Continue,
	"break" ";" => JumpStmt::Break,
	"return" <expr:Expr?> ";" => JumpStmt::Return(expr),
};

AsmStatement: AsmStmt = {
	"asm" <q:AsmQualifiers?> "(" <template:StringLiteral>
		<constraints:AsmOptionalConstraintList?> ")" ";"
		=> AsmStmt{qualifiers: q.unwrap_or_default(), template, constraints},
};

AsmQualifiers: Vec<AsmQualifier> = {
	AsmQualifier => vec![<>],
	<mut v:AsmQualifiers> <elem:AsmQualifier> => {
		v.push(elem);
		v
	},
};

AsmQualifier: AsmQualifier = {
	"volatile" => AsmQualifier::Volatile,
	"inline" => AsmQualifier::Inline,
	"goto" => AsmQualifier::Goto,
};

AsmOptionalConstraintList: AsmConstraints = AsmOutput;
AsmOutput: AsmConstraints = ":" <operands:AsmOutputOperand*> <input:AsmInput?> => {
	match input {
		Some(mut inner) => {
			inner.output_operands = operands;
			inner
		},
		None => AsmConstraints {
			output_operands: operands,
			input_operands: Vec::new(),
			clobber_operands: Vec::new(),
			goto_labels: Vec::new(),
		}
	}
};
AsmInput: AsmConstraints = ":" <operands:AsmInputOperand*> <clobber:AsmClobber?> => {
	match clobber {
		Some(mut inner) => {
			inner.input_operands = operands;
			inner
		},
		None => AsmConstraints {
			output_operands: Vec::new(),
			input_operands: operands,
			clobber_operands: Vec::new(),
			goto_labels: Vec::new(),
		}
	}
};
AsmClobber: AsmConstraints = ":" <operands: StringLiteralList?> <labels: AsmGotoLabels?> => {
	match labels {
		Some(mut inner) => {
			inner.clobber_operands = operands.unwrap_or_default();
			inner
		},
		None => AsmConstraints {
			output_operands: Vec::new(),
			input_operands: Vec::new(),
			clobber_operands: operands.unwrap_or_default(),
			goto_labels: Vec::new(),
		}
	}
};
AsmGotoLabels: AsmConstraints = ":" <labels: IdentifierList?> => AsmConstraints {
	output_operands: Vec::new(),
	input_operands: Vec::new(),
	clobber_operands: Vec::new(),
	goto_labels: labels.unwrap_or_default(),
};

AsmOutputOperand: OutputOperand = <prefix: StringLiteral> "(" <ident:Identifier> ")"
	=> OutputOperand {prefix, ident};
AsmInputOperand: InputOperand = <prefix:StringLiteral> "(" <expr:Expr> ")"
	=> InputOperand{prefix, expr};


StringLiteralList: Vec<StrLit> = {
	StringLiteral => vec![<>],
	StringLiteralList "," StringLiteral => todo!("string-list"),
};


// A.2.4 External definitions

pub Syntax: TranslationUnit = ExternalDeclaration+;

ExternalDeclaration: ExternalDeclaration = {
	FunctionDefinition => ExternalDeclaration::FunctionDefinition(<>),
	Declaration => ExternalDeclaration::Declaration(<>),
	AsmStatement => todo!("global asm stmt"),
	! => { errors.push(<>); ExternalDeclaration::Error },
};

FunctionDefinition: FunctionDefinition = {
	<specs: DeclarationSpecifier+> <decl:Declarator> <list:Declaration*> <compound:ClosedCompoundStatement> => {
		FunctionDefinition {
			declaration_specifiers: specs,
			declarator: decl,
			declaration_list: list,
			compound_stmt: compound,
		}
	},
};

//DeclarationList: Vec<Declaration> = Declaration+;

extern {
	type Location = usize;
	type Error = syn::Diagnostic;

	enum Token {
		IDENT => Token{kind: TokenKind::Ident(Ident{is_type:false, ..}), ..},
		TYPE_NAME => Token{kind: TokenKind::Ident(Ident{is_type:true, ..}), ..},
		CONST => Token{kind: TokenKind::Const(_), ..},
		STR_LIT => Token{kind: TokenKind::StrLit(_), ..},

		"typedef" => Token{kind: TokenKind::Keyword(Keyword::Typedef), ..},
		"extern" => Token{kind: TokenKind::Keyword(Keyword::Extern), ..},
		"static" => Token{kind: TokenKind::Keyword(Keyword::Static), ..},
		"auto" => Token{kind: TokenKind::Keyword(Keyword::Auto), ..},
		"register" => Token{kind: TokenKind::Keyword(Keyword::Register), ..},
		"void" => Token{kind: TokenKind::Keyword(Keyword::Void), ..},
		"char" => Token{kind: TokenKind::Keyword(Keyword::Char), ..},
		"short" => Token{kind: TokenKind::Keyword(Keyword::Short), ..},
		"int" => Token{kind: TokenKind::Keyword(Keyword::Int), ..},
		"long" => Token{kind: TokenKind::Keyword(Keyword::Long), ..},
		"float" => Token{kind: TokenKind::Keyword(Keyword::Float), ..},
		"double" => Token{kind: TokenKind::Keyword(Keyword::Double), ..},
		"signed" => Token{kind: TokenKind::Keyword(Keyword::Signed), ..},
		"unsigned" => Token{kind: TokenKind::Keyword(Keyword::Unsigned), ..},
		"_Bool" => Token{kind: TokenKind::Keyword(Keyword::Bool), ..},
		"const" => Token{kind: TokenKind::Keyword(Keyword::Const), ..},
		"restrict" => Token{kind: TokenKind::Keyword(Keyword::Restrict), ..},
		"volatile" => Token{kind: TokenKind::Keyword(Keyword::Volatile), ..},
		"enum" => Token{kind: TokenKind::Keyword(Keyword::Enum), ..},
		"struct" => Token{kind: TokenKind::Keyword(Keyword::Struct), ..},
		"sizeof" => Token{kind: TokenKind::Keyword(Keyword::Sizeof), ..},
		"union" => Token{kind: TokenKind::Keyword(Keyword::Union), ..},
		"inline" => Token{kind: TokenKind::Keyword(Keyword::Inline), ..},
		"case" => Token{kind: TokenKind::Keyword(Keyword::Case), ..},
		"default" => Token{kind: TokenKind::Keyword(Keyword::Default), ..},
		"if" => Token{kind: TokenKind::Keyword(Keyword::If), ..},
		"switch" => Token{kind: TokenKind::Keyword(Keyword::Switch), ..},
		"while" => Token{kind: TokenKind::Keyword(Keyword::While), ..},
		"do" => Token{kind: TokenKind::Keyword(Keyword::Do), ..},
		"for" => Token{kind: TokenKind::Keyword(Keyword::For), ..},
		"goto" => Token{kind: TokenKind::Keyword(Keyword::Goto), ..},
		"continue" => Token{kind: TokenKind::Keyword(Keyword::Continue), ..},
		"break" => Token{kind: TokenKind::Keyword(Keyword::Break), ..},
		"return" => Token{kind: TokenKind::Keyword(Keyword::Return), ..},
		"else" => Token{kind: TokenKind::Keyword(Keyword::Else), ..},
		"asm" => Token{kind: TokenKind::Keyword(Keyword::Asm), ..},

		"." => Token{kind: TokenKind::Punct(Punct::Dot), ..},
		"..." => Token{kind: TokenKind::Punct(Punct::Ellipsis), ..},
		"," => Token{kind: TokenKind::Punct(Punct::Comma), ..},
		"=" => Token{kind: TokenKind::Punct(Punct::Equal), ..},
		"*" => Token{kind: TokenKind::Punct(Punct::Star), ..},
		"+" => Token{kind: TokenKind::Punct(Punct::Plus), ..},
		"-" => Token{kind: TokenKind::Punct(Punct::Minus), ..},
		"~" => Token{kind: TokenKind::Punct(Punct::Tilde), ..},
		";" => Token{kind: TokenKind::Punct(Punct::SemiColon), ..},
		"{" => Token{kind: TokenKind::Punct(Punct::LCurly), ..},
		"}" => Token{kind: TokenKind::Punct(Punct::RCurly), ..},
		"(" => Token{kind: TokenKind::Punct(Punct::LParen), ..},
		")" => Token{kind: TokenKind::Punct(Punct::RParen), ..},
		")" => Token{kind: TokenKind::Punct(Punct::RParen), ..},
		"[" => Token{kind: TokenKind::Punct(Punct::LSquare), ..},
		"]" => Token{kind: TokenKind::Punct(Punct::RSquare), ..},
		"->" => Token{kind: TokenKind::Punct(Punct::Arrow), ..},
		"++" => Token{kind: TokenKind::Punct(Punct::PlusPlus), ..},
		"--" => Token{kind: TokenKind::Punct(Punct::MinusMinus), ..},
		"&" => Token{kind: TokenKind::Punct(Punct::Amp), ..},
		"!" => Token{kind: TokenKind::Punct(Punct::Bang), ..},
		"/" => Token{kind: TokenKind::Punct(Punct::FSlash), ..},
		"%" => Token{kind: TokenKind::Punct(Punct::Percent), ..},
		"<<" => Token{kind: TokenKind::Punct(Punct::LessLess), ..},
		">>" => Token{kind: TokenKind::Punct(Punct::GreatGreat), ..},
		"<" => Token{kind: TokenKind::Punct(Punct::Less), ..},
		">" => Token{kind: TokenKind::Punct(Punct::Amp), ..},
		"<=" => Token{kind: TokenKind::Punct(Punct::LessEqual), ..},
		">=" => Token{kind: TokenKind::Punct(Punct::GreatEqual), ..},
		"==" => Token{kind: TokenKind::Punct(Punct::EqualEqual), ..},
		"!=" => Token{kind: TokenKind::Punct(Punct::BangEqual), ..},
		"^" => Token{kind: TokenKind::Punct(Punct::Caret), ..},
		"|" => Token{kind: TokenKind::Punct(Punct::VBar), ..},
		"&&" => Token{kind: TokenKind::Punct(Punct::AmpAmp), ..},
		"||" => Token{kind: TokenKind::Punct(Punct::VBarVBar), ..},
		"?" => Token{kind: TokenKind::Punct(Punct::QMark), ..},
		":" => Token{kind: TokenKind::Punct(Punct::Colon), ..},
		"*=" => Token{kind: TokenKind::Punct(Punct::StarEqual), ..},
		"/=" => Token{kind: TokenKind::Punct(Punct::FSlashEqual), ..},
		"%=" => Token{kind: TokenKind::Punct(Punct::PercentEqual), ..},
		"+=" => Token{kind: TokenKind::Punct(Punct::PlusEqual), ..},
		"-=" => Token{kind: TokenKind::Punct(Punct::MinusEqual), ..},
		"<<=" => Token{kind: TokenKind::Punct(Punct::LessLessEqual), ..},
		">>=" => Token{kind: TokenKind::Punct(Punct::GreatGreatEqual), ..},
		"&=" => Token{kind: TokenKind::Punct(Punct::AmpEqual), ..},
		"^=" => Token{kind: TokenKind::Punct(Punct::CaretEqual), ..},
		"|=" => Token{kind: TokenKind::Punct(Punct::VBarEqual), ..},
	}
}
