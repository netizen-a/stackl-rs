use std::cell::RefCell;
use std::rc::Rc;
use crate::analysis::syn::*;
use crate::analysis::tok::*;
use crate::diagnostics as diag;
use lalrpop_util as lalr;
use crate::analysis::tok::file_id::FileId;


grammar<'a>(
	errors: &'a mut Vec<lalr::ErrorRecovery<usize, Token, diag::Diagnostic>>,
	tk_ref: &'a Rc<RefCell<InnerIter>>
);


// A.1.3 Identifiers

Identifier: Ident = IDENTIFIER => <>.kind.unwrap_ident();


// A.1.5 Constants

Constant: Const = CONSTANT => <>.kind.unwrap_const();

EnumerationConstant: Ident = Identifier;


// A.1.6 String literals

StringLiteral: StrLit = <v:STRING_LITERAL+> => string_concat(v.into_boxed_slice());


// A.2.1 Expressions

PrimaryExpr: Expr = {
	Identifier => Expr::Ident(<>),
	Constant => Expr::Const(<>),
	StringLiteral => Expr::StrLit(<>),
	"(" <expr:Expr> ")" => expr,
};

PostfixExpr: Expr = {
	PrimaryExpr,
	<expr:PostfixExpr> "[" <arr:Expr> "]" => Expr::with_postfix(Postfix::Array(Box::new(arr)), expr),
	<expr:PostfixExpr> "(" <args:ArgumentExprList?> ")" => Expr::with_postfix(Postfix::ArgExprList(args.unwrap_or_default()), expr),
	<expr:PostfixExpr> "." <ident:Identifier> => Expr::with_postfix(Postfix::Dot(ident), expr),
	<expr:PostfixExpr> "->" <ident:Identifier> => Expr::with_postfix(Postfix::Arrow(ident), expr),
	<expr:PostfixExpr> "++" => Expr::with_postfix(Postfix::Inc, expr),
	<expr:PostfixExpr> "--" => Expr::with_postfix(Postfix::Dec, expr),
	"(" <ty:TypeName> ")" "{" <list:InitializerList> ","? "}" => Expr::CompoundLiteral(ty, list),
};

ArgumentExprList: Vec<Expr> = {
	AssignmentExpr => vec![<>],
	<mut list:ArgumentExprList> "," <expr:AssignmentExpr> => {
		list.push(expr);
		list
	},
};

UnaryExpr: Expr = {
	PostfixExpr,
	"++" <expr:UnaryExpr> => Expr::with_prefix(Prefix::Inc,expr),
	"--" <expr:UnaryExpr> => Expr::with_prefix(Prefix::Dec,expr),
	<prefix:UnaryOperator> <expr:CastExpr> => Expr::with_prefix(prefix,expr),
	"sizeof" <expr:UnaryExpr> => Expr::with_prefix(Prefix::Sizeof,expr),
	"sizeof" "(" <ty:TypeName> ")" => Expr::Sizeof(ty),
};

UnaryOperator: Prefix = {
	"&" => Prefix::Amp,
	"*" => Prefix::Star,
	"+" => Prefix::Plus,
	"-" => Prefix::Minus,
	"~" => Prefix::Comp,
	"!" => Prefix::Neg,
};

CastExpr: Expr = {
	UnaryExpr,
	"(" <ty:TypeName> ")" <expr:CastExpr> => Expr::with_prefix(Prefix::Cast(ty),expr),
};

MultiplicativeExpr: Expr = {
	CastExpr,
	<lhs:MultiplicativeExpr> "*" <rhs:CastExpr> => Expr::with_binary(BinOp::Mul, lhs, rhs),
	<lhs:MultiplicativeExpr> "/" <rhs:CastExpr> => Expr::with_binary(BinOp::Div, lhs, rhs),
	<lhs:MultiplicativeExpr> "%" <rhs:CastExpr> => Expr::with_binary(BinOp::Mod, lhs, rhs),
};

AdditiveExpr: Expr = {
	MultiplicativeExpr,
	<lhs:AdditiveExpr> "+" <rhs:MultiplicativeExpr> => Expr::with_binary(BinOp::Add, lhs, rhs),
	<lhs:AdditiveExpr> "-" <rhs:MultiplicativeExpr> => Expr::with_binary(BinOp::Sub, lhs, rhs),
};

ShiftExpr: Expr = {
	AdditiveExpr,
	<lhs:ShiftExpr> "<<" <rhs:AdditiveExpr> => Expr::with_binary(BinOp::Shl, lhs, rhs),
	<lhs:ShiftExpr> ">>" <rhs:AdditiveExpr> => Expr::with_binary(BinOp::Shr, lhs, rhs),
};

RelationalExpr: Expr = {
	ShiftExpr,
	<lhs:RelationalExpr> "<" <rhs:ShiftExpr> => Expr::with_binary(BinOp::Less, lhs, rhs),
	<lhs:RelationalExpr> ">" <rhs:ShiftExpr> => Expr::with_binary(BinOp::Great, lhs, rhs),
	<lhs:RelationalExpr> "<=" <rhs:ShiftExpr> => Expr::with_binary(BinOp::LessEqual, lhs, rhs),
	<lhs:RelationalExpr> ">=" <rhs:ShiftExpr> => Expr::with_binary(BinOp::GreatEqual, lhs, rhs),
};

EqualityExpr: Expr = {
	RelationalExpr,
	<lhs:EqualityExpr> "==" <rhs:RelationalExpr> => Expr::with_binary(BinOp::Equal, lhs, rhs),
	<lhs:EqualityExpr> "!=" <rhs:RelationalExpr> => Expr::with_binary(BinOp::NotEqual, lhs, rhs),
};

AndExpr: Expr = {
	EqualityExpr,
	<lhs:AndExpr> "&" <rhs:EqualityExpr> => Expr::with_binary(BinOp::And, lhs, rhs),
};

ExclusiveOrExpr: Expr = {
	AndExpr,
	<lhs:ExclusiveOrExpr> "^" <rhs:AndExpr> => Expr::with_binary(BinOp::XOr, lhs, rhs),
};

InclusiveOrExpr: Expr = {
	ExclusiveOrExpr,
	<lhs:InclusiveOrExpr> "|" <rhs:ExclusiveOrExpr> => Expr::with_binary(BinOp::Or, lhs, rhs),
};

LogicalAndExpr: Expr = {
	InclusiveOrExpr,
	<lhs:LogicalAndExpr> "&&" <rhs:InclusiveOrExpr> => Expr::with_binary(BinOp::LogicalAnd, lhs, rhs),
};

LogicalOrExpr: Expr = {
	LogicalAndExpr,
	<lhs:LogicalOrExpr> "||" <rhs:LogicalAndExpr> => Expr::with_binary(BinOp::XOr, lhs, rhs),
};

ConditionalExpr: Expr = {
	LogicalOrExpr,
	<cond_expr:LogicalOrExpr> "?" <then_expr:Expr> ":" <else_expr:ConditionalExpr> => {
		Expr::with_ternary(cond_expr, then_expr, else_expr)
	},
};

AssignmentExpr: Expr = {
	ConditionalExpr,
	<lhs:UnaryExpr> <op:AssignmentOperator> <rhs:AssignmentExpr> => {
		Expr::Binary(ExprBinary{
			left: Box::new(lhs),
			op: op,
			right: Box::new(rhs),
		})
	},
};

AssignmentOperator: BinOp = {
	"=" => BinOp::Assign,
	"*=" => BinOp::MulAssign,
	"/=" => BinOp::DivAssign,
	"%=" => BinOp::ModAssign,
	"+=" => BinOp::AddAssign,
	"-=" => BinOp::SubAssign,
	"<<=" => BinOp::LShiftAssign,
	">>=" => BinOp::RShiftAssign,
	"&=" => BinOp::AmpAssign,
	"^=" => BinOp::XOrAssign,
	"|=" => BinOp::OrAssign,
};

Expr: Expr = {
	AssignmentExpr,
	<lhs:Expr> "," <rhs:AssignmentExpr> => Expr::Binary(ExprBinary{
		left: Box::new(lhs),
		op: BinOp::Comma,
		right: Box::new(rhs),
	}),
};

ConstantExpr = ConditionalExpr;



// A.2.2 Declarations

Declaration: Declaration = {
	<kind_list:DeclarationSpecifier+> <init_list:InitDeclaratorList?> ";" => {
		tk_ref.borrow_mut().is_typedef = false;
		Declaration {
			specifiers: Specifiers::from(kind_list),
			init_declarator_list: init_list.unwrap_or_default(),
		}
	},
};

DeclarationSpecifier: SpecifierKind = {
	StorageClassSpecifier => SpecifierKind::StorageClassSpecifier(<>),
	TypeSpecifier => SpecifierKind::TypeSpecifier(<>),
	TypeQualifier => SpecifierKind::TypeQualifier(<>),
	<lo:@L> <kw:"inline"> <hi:@R> => SpecifierKind::Inline(diag::Span{
		file_id: kw.file_id(),
		loc: (lo, hi),
	}),
};

InitDeclaratorList: Vec<InitDeclarator> = {
	InitDeclarator => vec![<>],
	<mut lhs:InitDeclaratorList> "," <rhs:InitDeclarator> => {
		lhs.push(rhs);
		lhs
	},
};

InitDeclarator: InitDeclarator = {
	<decl:Declarator> => InitDeclarator {
		identifier: decl.0,
		declarator: decl.1,
		initializer: None,
	},
	<decl:Declarator> "=" <init:Initializer> => InitDeclarator {
		identifier: decl.0,
		declarator: decl.1,
		initializer: Some(init)
	},
};

StorageClassSpecifier: StorageClassSpecifier = {
	<lo:@L> <kw:"typedef"> <hi:@R> => {
		tk_ref.borrow_mut().is_typedef = true;
		StorageClassSpecifier {
			span: diag::Span{
				loc: (lo,hi),
				file_id: kw.file_id(),
			},
			storage_class: StorageClass::Typedef,
		}
	},
	<lo:@L> <kw:"extern"> <hi:@R> => StorageClassSpecifier {
		span: diag::Span{
			loc: (lo,hi),
			file_id: kw.file_id(),
		},
		storage_class: StorageClass::Extern,
	},
	<lo:@L> <kw:"static"> <hi:@R> => StorageClassSpecifier {
		span: diag::Span{
			loc: (lo,hi),
			file_id: kw.file_id(),
		},
		storage_class: StorageClass::Static,
	},
	<lo:@L> <kw:"auto"> <hi:@R> => StorageClassSpecifier {
		span: diag::Span{
			loc: (lo,hi),
			file_id: kw.file_id(),
		},
		storage_class: StorageClass::Auto,
	},
	<lo:@L> <kw:"register"> <hi:@R> => StorageClassSpecifier {
		span: diag::Span{
			loc: (lo,hi),
			file_id: kw.file_id(),
		},
		storage_class: StorageClass::Register,
	},
}

TypeSpecifier: TypeSpecifier = {
	<lo:@L> <kw:"void"> <hi:@R> => TypeSpecifier::Void(diag::Span{
		loc: (lo,hi),
		file_id: kw.file_id(),
	}),
	<lo:@L> <kw:"char"> <hi:@R> => TypeSpecifier::Char(diag::Span{
		loc: (lo,hi),
		file_id: kw.file_id(),
	}),
	<lo:@L> <kw:"short"> <hi:@R> => TypeSpecifier::Short(diag::Span{
		loc: (lo,hi),
		file_id: kw.file_id(),
	}),
	<lo:@L> <kw:"int"> <hi:@R> => TypeSpecifier::Int(diag::Span{
		loc: (lo,hi),
		file_id: kw.file_id(),
	}),
	<lo:@L> <kw:"long"> <hi:@R> => TypeSpecifier::Long(diag::Span{
		loc: (lo,hi),
		file_id: kw.file_id(),
	}),
	<lo:@L> <kw:"float"> <hi:@R> => TypeSpecifier::Float(diag::Span{
		loc: (lo,hi),
		file_id: kw.file_id(),
	}),
	<lo:@L> <kw:"double"> <hi:@R> => TypeSpecifier::Double(diag::Span{
		loc: (lo,hi),
		file_id: kw.file_id(),
	}),
	<lo:@L> <kw:"signed"> <hi:@R> => TypeSpecifier::Signed(diag::Span{
		loc: (lo,hi),
		file_id: kw.file_id(),
	}),
	<lo:@L> <kw:"unsigned"> <hi:@R> => TypeSpecifier::Unsigned(diag::Span{
		loc: (lo,hi),
		file_id: kw.file_id(),
	}),
	<lo:@L> <kw:"_Bool"> <hi:@R> => TypeSpecifier::Bool(diag::Span{
		loc: (lo,hi),
		file_id: kw.file_id(),
	}),
	StructOrUnionSpecifier => TypeSpecifier::StructOrUnionSpecifier(<>),
	EnumSpecifier => TypeSpecifier::EnumSpecifier(<>),
	<lo:@L> <name:TYPE_NAME> <hi:@R> => TypeSpecifier::TypedefName{
		span: diag::Span{
			loc: (lo,hi),
			file_id: name.file_id(),
		},
		name: name.kind.unwrap_ident()
	},
};

StructOrUnionSpecifier: StructOrUnionSpecifier = {
	<prefix:StructOrUnion> <ident:Identifier?> "{" <list:StructDeclaration+> "}" => StructOrUnionSpecifier {
		struct_or_union: prefix,
		ident,
		struct_declaration_list: list,
	},
	<prefix:StructOrUnion> <ident:Identifier> => StructOrUnionSpecifier {
		struct_or_union: prefix,
		ident: Some(ident),
		struct_declaration_list: vec![],
	},
};

StructOrUnion: StructOrUnion = {
	<lo:@L> <kw:"struct"> <hi:@R> => StructOrUnion{
		span: diag::Span{
			loc: (lo,hi),
			file_id: kw.file_id(),
		},
		keyword: Keyword::Struct,
	},
	<lo:@L> <kw:"union"> <hi:@R> => StructOrUnion{
		span: diag::Span{
			loc: (lo,hi),
			file_id: kw.file_id(),
		},
		keyword: Keyword::Union,
	},
};

StructDeclaration: StructDeclaration = {
	<list0:SpecifierQualifierList> <list1:StructDeclaratorList> ";" => StructDeclaration {
		specifiers: Specifiers::from(list0),
		struct_declaration_list: list1,
	}
};

SpecifierQualifierList: Vec<SpecifierKind> = SpecifierQualifier+;

SpecifierQualifier: SpecifierKind = {
	TypeSpecifier => SpecifierKind::TypeSpecifier(<>),
	TypeQualifier => SpecifierKind::TypeQualifier(<>),
};

StructDeclaratorList: Vec<StructDeclarator> = {
	StructDeclarator => vec![<>],
	<mut list:StructDeclaratorList> "," <elem:StructDeclarator> => {
		list.push(elem);
		list
	},
};

StructDeclarator: StructDeclarator = {
	<decl:Declarator> => StructDeclarator {
		identifier: Some(decl.0),
		declarator: decl.1,
		const_expr: None,
	},
	<decl:Declarator?> ":" <expr:ConstantExpr> => StructDeclarator {
		identifier: decl.clone().map(|inner| inner.0),
		declarator: decl.map(|inner| inner.1).unwrap_or_default(),
		const_expr: Some(expr),
	},
};

EnumSpecifier: EnumSpecifier = {
	<lo:@L> <kw:"enum"> <hi:@R> <id:Identifier?> "{" <list:EnumeratorList> ","? "}" => {
		EnumSpecifier {
			tag_span: diag::Span {loc: (lo, hi), file_id: kw.file_id()},
			identifier: id,
			enumerator_list: list,
		}
	},
	<lo:@L> <kw:"enum"> <hi:@R> <id:Identifier> => EnumSpecifier{
		tag_span: diag::Span {loc: (lo, hi), file_id: kw.file_id()},
		identifier: Some(id),
		enumerator_list: vec![],
	},
};

EnumeratorList: Vec<Enumerator> = {
	Enumerator => vec![<>],
	<mut list:EnumeratorList> "," <elem:Enumerator> => {
		list.push(elem);
		list
	},
};

Enumerator: Enumerator = {
	<ident:EnumerationConstant> => Enumerator {
		enumeration_constant: ident,
		constant_expr: None,
	},
	<ident:EnumerationConstant> "=" <expr:ConstantExpr> => Enumerator {
		enumeration_constant: ident,
		constant_expr: Some(expr),
	},
};

TypeQualifier: TypeQualifier = {
	<lo:@L> <kw:"const"> <hi:@R>    => TypeQualifier{
		span: diag::Span {loc: (lo, hi), file_id: kw.file_id()},
		kind: TypeQualifierKind::Const,
	},
	<lo:@L> <kw:"restrict"> <hi:@R> => TypeQualifier{
		span: diag::Span {loc: (lo, hi), file_id: kw.file_id()},
		kind: TypeQualifierKind::Restrict,
	},
	<lo:@L> <kw:"volatile"> <hi:@R> => TypeQualifier{
		span: diag::Span {loc: (lo, hi), file_id: kw.file_id()},
		kind: TypeQualifierKind::Volatile,
	},
};

Declarator: (Ident, Vec<Declarator>) = {
	<ptr:Pointer?> <mut dd_list:DirectDeclaratorList> => {
		let mut ptr_list: Vec<Declarator> = ptr
			.unwrap_or_default()
			.into_iter()
			.map(Declarator::Pointer)
			.collect();
		dd_list.1.append(&mut ptr_list);
		dd_list
	},
};

DirectDeclaratorList: (Ident, Vec<Declarator>) = {
	<mut ident:Identifier> => {
		let mut tk_mut = tk_ref.borrow_mut();
		if tk_mut.is_typedef == true {
			ident.is_type = true;
			tk_mut.push_type(ident.clone());
		}
		(ident, vec![])
	},
	"(" <decl:Declarator> ")" => decl,
	<mut dd_list:DirectDeclaratorList> <lo:@L> <lsqr:"["> <hi:@R> <qual:TypeQualifier*> <expr:AssignmentExpr?> "]" => {
		let array = ArrayDecl{
			span: diag::Span {
				file_id: lsqr.file_id(),
				loc: (lo, hi),
			},
			type_qualifiers: qual,
			assignment_expr: expr,
			has_static: false,
			has_ptr: false,
		};
		dd_list.1.push(Declarator::Array(array));
		dd_list
	},
	<mut dd_list:DirectDeclaratorList> <lo:@L> <lsqr:"["> <hi:@R> "static" <qual:TypeQualifier*> <expr:AssignmentExpr> "]" => {
		let array = ArrayDecl{
			span: diag::Span {
				file_id: lsqr.file_id(),
				loc: (lo, hi),
			},
			type_qualifiers: qual,
			assignment_expr: Some(expr),
			has_static: true,
			has_ptr: false,
		};
		dd_list.1.push(Declarator::Array(array));
		dd_list
	},
	<mut dd_list:DirectDeclaratorList> <lo:@L> <lsqr:"["> <hi:@R> <qual:TypeQualifier+> "static" <expr:AssignmentExpr> "]" => {
		let array = ArrayDecl{
			span: diag::Span {
				file_id: lsqr.file_id(),
				loc: (lo, hi),
			},
			type_qualifiers: qual,
			assignment_expr: Some(expr),
			has_static: true,
			has_ptr: false,
		};
		dd_list.1.push(Declarator::Array(array));
		dd_list
	},
	<mut dd_list:DirectDeclaratorList> <lo:@L> <lsqr:"["> <hi:@R> <qual:TypeQualifier*> "*" "]" => {
		let array = ArrayDecl {
			span: diag::Span {
				file_id: lsqr.file_id(),
				loc: (lo, hi),
			},
			type_qualifiers: qual,
			assignment_expr: None,
			has_static: false,
			has_ptr: true,
		};
		dd_list.1.push(Declarator::Array(array));
		dd_list
	},
	<mut dd_list:DirectDeclaratorList> <lo: @L> <lparen:"("> <hi:@R> <mut param_list: ParameterTypeList> ")" => {
		param_list.span = diag::Span {
			file_id: lparen.file_id,
			loc: (lo, hi),
		};
		dd_list.1.push(Declarator::ParamList(param_list));
		dd_list
	},
	<mut dd_list:DirectDeclaratorList> <lo: @L> <lparen:"("> <hi:@R> <ident_list:IdentifierList?> ")" => {
		let mut ident_list = IdentList {
			span: diag::Span {
				file_id: lparen.file_id,
				loc: (lo, hi),
			},
			ident_list: ident_list.unwrap_or_default(),
		};
		dd_list.1.push(Declarator::IdentList(ident_list));
		dd_list
	},
};

Pointer: Vec<PtrDecl> = {
	"*" <type_qualifier_list:TypeQualifier*> => vec![PtrDecl::from(type_qualifier_list.as_slice())],
	"*" <type_qualifier_list:TypeQualifier*> <mut v:Pointer> => {
		v.push(PtrDecl::from(type_qualifier_list.as_slice()));
		v
	},
};
ParameterTypeList: ParamList = {
	<params:ParameterList> => ParamList {
		span: diag::Span::default(),
		param_list: params,
		is_variadic: false,
	},
	<params:ParameterList> "," "..." => ParamList {
		span: diag::Span::default(),
		param_list: params,
		is_variadic: true,
	},
};

ParameterList: Vec<ParameterDeclaration> = {
	ParameterDeclaration => vec![<>],
	<mut v:ParameterList> "," <elem:ParameterDeclaration> => {
		v.push(elem);
		v
	},
};

ParameterDeclaration: ParameterDeclaration = {
	<kind_list:DeclarationSpecifier+> <decl:ParameterDeclarator> => {
		ParameterDeclaration {
			name: decl.0,
			specifiers: Specifiers::from(kind_list),
			declarators: decl.1,
		}
	},
};

ParameterDeclarator: (Option<Ident>,Vec<Declarator>) = {
	Declarator => (Some(<>.0), <>.1),
	<decl:AbstractDeclarator?> => (None, decl.unwrap_or_default()),
}

IdentifierList: Vec<Ident> = {
	Identifier => vec![<>],
	<mut v:IdentifierList> "," <elem:Identifier> => {
		v.push(elem);
		v
	},
};

TypeName: TypeName = {
	SpecifierQualifierList AbstractDeclarator? => todo!("specifier-qualifier-list abstract-declarator"),
};

AbstractDeclarator: Vec<Declarator> = {
	<ptr:Pointer> => {
		ptr.into_iter()
			.map(Declarator::Pointer)
			.collect()
	},
	<ptr:Pointer?> <mut direct_abstract_list:DirectAbstractDeclarator> => {
		let mut ptr_list: Vec<Declarator> = ptr
			.unwrap_or_default()
			.into_iter()
			.map(Declarator::Pointer)
			.collect();
		direct_abstract_list.append(&mut ptr_list);
		direct_abstract_list
	},
};


DirectAbstractDeclarator: Vec<Declarator> = {
	"(" <abstract_decl:AbstractDeclarator> ")" => abstract_decl,
	<mut decl:DirectAbstractDeclarator?> <lo:@L> <lsqr:"["> <hi:@R> <qual:TypeQualifier*> <expr:AssignmentExpr?> "]" => {
		let array = ArrayDecl{
			span: diag::Span {
				file_id: lsqr.file_id(),
				loc: (lo, hi),
			},
			type_qualifiers: qual,
			assignment_expr: expr,
			has_static: false,
			has_ptr: false,
		};
		let value = Declarator::Array(array);
		if let Some(mut decl_list) = decl {
			decl_list.push(value);
			decl_list
		} else {
			vec![value]
		}
	},
	<mut decl:DirectAbstractDeclarator?> <lo:@L> <lsqr:"["> <hi:@R> "static" <qual:TypeQualifier*> <expr:AssignmentExpr> "]" => {
		let array = ArrayDecl{
			span: diag::Span {
				file_id: lsqr.file_id(),
				loc: (lo, hi),
			},
			type_qualifiers: qual,
			assignment_expr: Some(expr),
			has_static: true,
			has_ptr: false,
		};
		let value = Declarator::Array(array);
		if let Some(mut decl_list) = decl {
			decl_list.push(value);
			decl_list
		} else {
			vec![value]
		}
	},
	<mut decl:DirectAbstractDeclarator?> <lo:@L> <lsqr:"["> <hi:@R> <qual:TypeQualifier+> "static" <expr:AssignmentExpr> "]" => {
		let array = ArrayDecl{
			span: diag::Span {
				file_id: lsqr.file_id(),
				loc: (lo, hi),
			},
			type_qualifiers: qual,
			assignment_expr: Some(expr),
			has_static: true,
			has_ptr: false,
		};
		let value = Declarator::Array(array);
		if let Some(mut decl_list) = decl {
			decl_list.push(value);
			decl_list
		} else {
			vec![value]
		}
	},
	<mut decl:DirectAbstractDeclarator?> <lo:@L> <lsqr:"["> <hi:@R> "*" "]" => {
		let array = ArrayDecl{
			span: diag::Span {
				file_id: lsqr.file_id(),
				loc: (lo, hi),
			},
			type_qualifiers: vec![],
			assignment_expr: None,
			has_static: false,
			has_ptr: true,
		};
		let value = Declarator::Array(array);
		if let Some(mut decl_list) = decl {
			decl_list.push(value);
			decl_list
		} else {
			vec![value]
		}
	},
	<mut decl:DirectAbstractDeclarator?> <lo:@L> <lparen:"("> <hi:@R> <params:ParameterTypeList?> ")" => {
		let value = if let Some(params) = params {
			Declarator::ParamList(params)
		} else {
			let params = ParamList {
				span: diag::Span {
					file_id: lparen.file_id,
					loc: (lo, hi),
				},
				param_list: vec![],
				is_variadic: false,
			};
			Declarator::ParamList(params)
		};
		if let Some(mut decl_list) = decl {
			decl_list.push(value);
			decl_list
		} else {
			vec![value]
		}
	},
};

Initializer: Initializer = {
	AssignmentExpr => Initializer::Expr(<>),
	"{" InitializerList ","? "}" => todo!("init-list"),
};

InitializerList: InitializerList = {
	Designation? Initializer => todo!("desig init"),
	InitializerList "," Designation? Initializer => todo!("init list , desig"),
};

Designation: Designation = {
	Designator+ "=" => todo!("desig list"),
};

Designator: Designator = {
	"[" ConstantExpr "]" => todo!("const-expr"),
	"." Identifier => todo!(" . identifier"),
};


// A.2.3 Statements

Statement: Stmt = {
	OpenedStatement,
	ClosedStatement,
};

OpenedStatement: Stmt = {
	"if" "(" Expr ")" OpenedStatement => todo!("opened-if"),
	"if" "(" Expr ")" ClosedStatement "else" OpenedStatement => todo!("opened-if-else"),
	"switch" "(" Expr ")" OpenedStatement => todo!("opened-switch"),
	OpenedLabeledStatement => todo!("opened-label"),
	OpenedCompoundStatement => todo!("opened-compound"),
	OpenedIterationStatement => todo!("opened-iter"),
};

ClosedStatement: Stmt = {
	SimpleStatement,
	"if" "(" Expr ")" ClosedStatement "else" ClosedStatement => todo!("closed-if"),
	"switch" "(" Expr ")" ClosedStatement => todo!("closed-switch"),
	ClosedLabeledStatement => todo!("closed-label"),
	ClosedCompoundStatement => Stmt::Compound(<>),
	ClosedIterationStatement => todo!("closed-iter"),
};

SimpleStatement: Stmt = {
	ExprStatement => Stmt::Expr(<>),
	JumpStatement => Stmt::Jump(<>),
	AsmStatement => Stmt::Asm(<>),
};


OpenedLabeledStatement: LabeledStmt = {
	Identifier ":" OpenedStatement => todo!("label"),
	"case" ConstantExpr ":" OpenedStatement => todo!("case"),
	"default" ":" OpenedStatement => todo!("default"),
};

ClosedLabeledStatement: LabeledStmt = {
	Identifier ":" ClosedStatement => todo!("label"),
	"case" ConstantExpr ":" ClosedStatement => todo!("case"),
	"default" ":" ClosedStatement => todo!("default"),
};


OpenedCompoundStatement: CompoundStmt = {
	<lcurly:LeftCurly> <blocks:OpenedBlockItem*> <rcurly:RightCurly> => CompoundStmt{
		lcurly,
		blocks,
		rcurly,
	},
};

ClosedCompoundStatement: CompoundStmt = {
	<lcurly:LeftCurly> <blocks:ClosedBlockItem*> <rcurly:RightCurly> => CompoundStmt{
		lcurly,
		blocks,
		rcurly,
	},
};

LeftCurly: diag::Span = <lo:@L> <lcurly:"{"> <hi:@R> => {
	tk_ref.borrow_mut().increase_scope();
	diag::Span {
		file_id: lcurly.file_id(),
		loc: (lo, hi),
	}
};

RightCurly: diag::Span = <lo:@L> <rcurly:"}"> <hi:@R> => {
	tk_ref.borrow_mut().decrease_scope();
	diag::Span {
		file_id: rcurly.file_id(),
		loc: (lo, hi),
	}
};


OpenedBlockItem: BlockItem = {
	Declaration => BlockItem::Declaration(<>),
	OpenedStatement => BlockItem::Statement(<>),
	! => { errors.push(<>); BlockItem::Error },
};
ClosedBlockItem: BlockItem = {
	Declaration => BlockItem::Declaration(<>),
	ClosedStatement => BlockItem::Statement(<>),
	! => { errors.push(<>); BlockItem::Error },
};

ExprStatement: ExprStmt = <expr:Expr?> ";" => ExprStmt(expr);

ClosedIterationStatement: IterStmt = {
	"while" "(" Expr ")" ClosedStatement => todo!(),
	"do" ClosedStatement "while" "(" Expr ")" ";"
	"for" "(" Expr? ";" Expr? ";" Expr? ")" ClosedStatement => todo!(),
	"for" "(" Declaration Expr? ";" Expr? ")" ClosedStatement => todo!(),
};
OpenedIterationStatement: IterStmt = {
	"while" "(" Expr ")" OpenedStatement => todo!(),
	"do" OpenedStatement "while" "(" Expr ")" ";"
	"for" "(" Expr? ";" Expr? ";" Expr? ")" OpenedStatement => todo!(),
	"for" "(" Declaration Expr? ";" Expr? ")" OpenedStatement => todo!(),
};

JumpStatement: JumpStmt = {
	"goto" <ident:Identifier> ";" => JumpStmt::Goto(ident),
	"continue" ";" => JumpStmt::Continue,
	"break" ";" => JumpStmt::Break,
	"return" <expr:Expr?> ";" => JumpStmt::Return(expr),
};

AsmStatement: AsmStmt = {
	"asm" "(" <template:StringLiteral> ")" ";" => AsmStmt(template),
};

StringLiteralList: Vec<StrLit> = {
	StringLiteral => vec![<>],
	<mut v:StringLiteralList> "," <s:StringLiteral> => {
		v.push(s);
		v
	},
};


// A.2.4 External definitions

pub Syntax: TranslationUnit = ExternalDeclaration+;

ExternalDeclaration: ExternalDeclaration = {
	FunctionDefinition => ExternalDeclaration::FunctionDefinition(<>),
	Declaration => ExternalDeclaration::Declaration(<>),
	AsmStatement => ExternalDeclaration::Asm(<>),
	! => { errors.push(<>); ExternalDeclaration::Error },
};

FunctionDefinition: FunctionDefinition = {
	<kind_list: DeclarationSpecifier+> <decl:Declarator> <list:Declaration*> <compound:ClosedCompoundStatement> => {
		FunctionDefinition {
			specifiers: Specifiers::from(kind_list),
			ident: decl.0,
			declarators: decl.1,
			declaration_list: list,
			compound_stmt: compound,
		}
	},
};

extern {
	type Location = usize;
	type Error = diag::Diagnostic;

	enum Token {
		IDENTIFIER => Token{kind: TokenKind::Ident(Ident{is_type:false, ..}), ..},
		TYPE_NAME => Token{kind: TokenKind::Ident(Ident{is_type:true, ..}), ..},
		CONSTANT => Token{kind: TokenKind::Const(_), ..},
		STRING_LITERAL => Token{kind: TokenKind::StrLit(_), ..},

		"typedef" => Token{kind: TokenKind::Keyword(Keyword::Typedef), ..},
		"extern" => Token{kind: TokenKind::Keyword(Keyword::Extern), ..},
		"static" => Token{kind: TokenKind::Keyword(Keyword::Static), ..},
		"auto" => Token{kind: TokenKind::Keyword(Keyword::Auto), ..},
		"register" => Token{kind: TokenKind::Keyword(Keyword::Register), ..},
		"void" => Token{kind: TokenKind::Keyword(Keyword::Void), ..},
		"char" => Token{kind: TokenKind::Keyword(Keyword::Char), ..},
		"short" => Token{kind: TokenKind::Keyword(Keyword::Short), ..},
		"int" => Token{kind: TokenKind::Keyword(Keyword::Int), ..},
		"long" => Token{kind: TokenKind::Keyword(Keyword::Long), ..},
		"float" => Token{kind: TokenKind::Keyword(Keyword::Float), ..},
		"double" => Token{kind: TokenKind::Keyword(Keyword::Double), ..},
		"signed" => Token{kind: TokenKind::Keyword(Keyword::Signed), ..},
		"unsigned" => Token{kind: TokenKind::Keyword(Keyword::Unsigned), ..},
		"_Bool" => Token{kind: TokenKind::Keyword(Keyword::Bool), ..},
		"const" => Token{kind: TokenKind::Keyword(Keyword::Const), ..},
		"restrict" => Token{kind: TokenKind::Keyword(Keyword::Restrict), ..},
		"volatile" => Token{kind: TokenKind::Keyword(Keyword::Volatile), ..},
		"enum" => Token{kind: TokenKind::Keyword(Keyword::Enum), ..},
		"struct" => Token{kind: TokenKind::Keyword(Keyword::Struct), ..},
		"sizeof" => Token{kind: TokenKind::Keyword(Keyword::Sizeof), ..},
		"union" => Token{kind: TokenKind::Keyword(Keyword::Union), ..},
		"inline" => Token{kind: TokenKind::Keyword(Keyword::Inline), ..},
		"case" => Token{kind: TokenKind::Keyword(Keyword::Case), ..},
		"default" => Token{kind: TokenKind::Keyword(Keyword::Default), ..},
		"if" => Token{kind: TokenKind::Keyword(Keyword::If), ..},
		"switch" => Token{kind: TokenKind::Keyword(Keyword::Switch), ..},
		"while" => Token{kind: TokenKind::Keyword(Keyword::While), ..},
		"do" => Token{kind: TokenKind::Keyword(Keyword::Do), ..},
		"for" => Token{kind: TokenKind::Keyword(Keyword::For), ..},
		"goto" => Token{kind: TokenKind::Keyword(Keyword::Goto), ..},
		"continue" => Token{kind: TokenKind::Keyword(Keyword::Continue), ..},
		"break" => Token{kind: TokenKind::Keyword(Keyword::Break), ..},
		"return" => Token{kind: TokenKind::Keyword(Keyword::Return), ..},
		"else" => Token{kind: TokenKind::Keyword(Keyword::Else), ..},
		"asm" => Token{kind: TokenKind::Keyword(Keyword::Asm), ..},

		"." => Token{kind: TokenKind::Punct(Punct::Dot), ..},
		"..." => Token{kind: TokenKind::Punct(Punct::Ellipsis), ..},
		"," => Token{kind: TokenKind::Punct(Punct::Comma), ..},
		"=" => Token{kind: TokenKind::Punct(Punct::Equal), ..},
		"*" => Token{kind: TokenKind::Punct(Punct::Star), ..},
		"+" => Token{kind: TokenKind::Punct(Punct::Plus), ..},
		"-" => Token{kind: TokenKind::Punct(Punct::Minus), ..},
		"~" => Token{kind: TokenKind::Punct(Punct::Tilde), ..},
		";" => Token{kind: TokenKind::Punct(Punct::SemiColon), ..},
		"{" => Token{kind: TokenKind::Punct(Punct::LCurly), ..},
		"}" => Token{kind: TokenKind::Punct(Punct::RCurly), ..},
		"(" => Token{kind: TokenKind::Punct(Punct::LParen), ..},
		")" => Token{kind: TokenKind::Punct(Punct::RParen), ..},
		")" => Token{kind: TokenKind::Punct(Punct::RParen), ..},
		"[" => Token{kind: TokenKind::Punct(Punct::LSquare), ..},
		"]" => Token{kind: TokenKind::Punct(Punct::RSquare), ..},
		"->" => Token{kind: TokenKind::Punct(Punct::Arrow), ..},
		"++" => Token{kind: TokenKind::Punct(Punct::PlusPlus), ..},
		"--" => Token{kind: TokenKind::Punct(Punct::MinusMinus), ..},
		"&" => Token{kind: TokenKind::Punct(Punct::Amp), ..},
		"!" => Token{kind: TokenKind::Punct(Punct::Bang), ..},
		"/" => Token{kind: TokenKind::Punct(Punct::FSlash), ..},
		"%" => Token{kind: TokenKind::Punct(Punct::Percent), ..},
		"<<" => Token{kind: TokenKind::Punct(Punct::LessLess), ..},
		">>" => Token{kind: TokenKind::Punct(Punct::GreatGreat), ..},
		"<" => Token{kind: TokenKind::Punct(Punct::Less), ..},
		">" => Token{kind: TokenKind::Punct(Punct::Amp), ..},
		"<=" => Token{kind: TokenKind::Punct(Punct::LessEqual), ..},
		">=" => Token{kind: TokenKind::Punct(Punct::GreatEqual), ..},
		"==" => Token{kind: TokenKind::Punct(Punct::EqualEqual), ..},
		"!=" => Token{kind: TokenKind::Punct(Punct::BangEqual), ..},
		"^" => Token{kind: TokenKind::Punct(Punct::Caret), ..},
		"|" => Token{kind: TokenKind::Punct(Punct::VBar), ..},
		"&&" => Token{kind: TokenKind::Punct(Punct::AmpAmp), ..},
		"||" => Token{kind: TokenKind::Punct(Punct::VBarVBar), ..},
		"?" => Token{kind: TokenKind::Punct(Punct::QMark), ..},
		":" => Token{kind: TokenKind::Punct(Punct::Colon), ..},
		"*=" => Token{kind: TokenKind::Punct(Punct::StarEqual), ..},
		"/=" => Token{kind: TokenKind::Punct(Punct::FSlashEqual), ..},
		"%=" => Token{kind: TokenKind::Punct(Punct::PercentEqual), ..},
		"+=" => Token{kind: TokenKind::Punct(Punct::PlusEqual), ..},
		"-=" => Token{kind: TokenKind::Punct(Punct::MinusEqual), ..},
		"<<=" => Token{kind: TokenKind::Punct(Punct::LessLessEqual), ..},
		">>=" => Token{kind: TokenKind::Punct(Punct::GreatGreatEqual), ..},
		"&=" => Token{kind: TokenKind::Punct(Punct::AmpEqual), ..},
		"^=" => Token{kind: TokenKind::Punct(Punct::CaretEqual), ..},
		"|=" => Token{kind: TokenKind::Punct(Punct::VBarEqual), ..},
	}
}
