// use crate::data_types::DataType;

use std::path;

use crate::{analysis::{syn::StorageClass, tok}, data_types::DataType};

#[derive(Debug, Clone)]
pub enum DiagKind {
	Internal(String),
	FileNotFound(path::PathBuf),
	ErrorDirective(String),
	UnexpectedEof,
	UnexpectedEscape,
	UnrecognizedToken {
		token: String,
		expected: Vec<String>,
	},
	InvalidToken,
	ExtraToken,
	//HeaderNameError,
	MultStorageClasses,
	DuplicateSpecifier(String),
	BothSpecifiers(String, String),
	InvalidRestrict,
	//TypeError { found: DataType, expected: DataType },
	MultipleTypes,
	TooLong,
	ImplicitInt(Option<String>),
	ArrayOfFunctions{
		name: Option<String>,
		dtype: DataType,
	},
	FnRetFn(Option<String>),
	OmittedParamName,
	DeclIdentList,
	UnboundVLA,
	InvalidStar,
	IfAssign,
	OnlyVoid,
	ArrayOfVoid(Option<String>),
	IllegalStorage(StorageClass),
	BitfieldRange(Option<String>),
	BitfieldNonIntegral(Option<String>),
	NonConstExpr,
	EnumRange,
	EnumNonIntegral(String),
	ArrayMaxRange,
	ArrayMinRange,
	DeclaratorLimit,
	ParameterLimit,
	UndefPredef,
	RedefPredef,
	DirectiveExtraTokens(tok::Directive),
	DirectiveLineNotSimple,
	DirectiveLineMinRange,
	DirectiveLineMaxRange,
	DirectiveLineFilename,
	DirectiveIncludeExtraTokens,
	DirectivePragma,
	StructNoNamedMembers,
	ArrayArgTooSmall,
	SymbolAlreadyExists(String),
	ArrayDeclIncomplete,
	ArrayExcessElements,
	VlaInitList,
}
