// use crate::data_types::DataType;

use crate::analysis::syn::StorageClass;

#[derive(Debug, Clone)]
pub enum DiagKind {
	ErrorDirective(String),
	UnexpectedEof,
	UnexpectedEscape,
	UnrecognizedToken { expected: Vec<String> },
	InvalidToken,
	ExtraToken,
	//HeaderNameError,
	MultStorageClasses,
	DuplicateSpecifier(String),
	BothSpecifiers(String, String),
	InvalidRestrict,
	//TypeError { found: DataType, expected: DataType },
	MultipleTypes,
	TooLong,
	ImplicitInt(String),
	ArrayOfFunctions(String),
	FnRetFn(Option<String>),
	OmittedParamName,
	DeclIdentList,
	UnboundVLA,
	InvalidStar,
	IfAssign,
	OnlyVoid,
	ArrayOfVoid(Option<String>),
	IllegalStorage(StorageClass),
	BitfieldRange(Option<String>),
	BitfieldNonIntegral(Option<String>),
	NonConstExpr,
	EnumRange,
	EnumNonIntegral(String),
	ArrayMaxRange,
	ArrayMinRange,
	DeclaratorLimit,
	ParameterLimit,
	UndefPredef,
	RedefPredef,
	DirectiveLineNotSimple,
	DirectiveLineMinRange,
	DirectiveLineMaxRange,
	DirectiveLineFilename,
	DirectiveLineExtraTokens,
}
